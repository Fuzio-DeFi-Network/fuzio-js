/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Addr, Decimal, Uint128, InstantiateMsg, Config, WalletInfo, ExecuteMsg, QueryMsg, MigrateMsg, Timestamp, Uint64, Direction, FinishedRound, AdminsResponse, ClaimInfoResponse, ClaimInfo, RoundUsersResponse, BetInfo, MyCurrentPositionResponse, MyGameResponse, PendingRewardResponse, PendingRewardRoundsResponse, StatusResponse, NextRound, LiveRound, TotalSpentResponse } from "./FuzioNativePrediction.types";
import { FuzioNativePredictionQueryClient, FuzioNativePredictionClient } from "./FuzioNativePrediction.client";
export const fuzioNativePredictionQueryKeys = {
  contract: ([{
    contract: "fuzioNativePrediction"
  }] as const),
  address: (contractAddress: string) => ([{ ...fuzioNativePredictionQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  config: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...fuzioNativePredictionQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const),
  status: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...fuzioNativePredictionQueryKeys.address(contractAddress)[0],
    method: "status",
    args
  }] as const),
  myCurrentPosition: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...fuzioNativePredictionQueryKeys.address(contractAddress)[0],
    method: "my_current_position",
    args
  }] as const),
  finishedRound: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...fuzioNativePredictionQueryKeys.address(contractAddress)[0],
    method: "finished_round",
    args
  }] as const),
  myGameList: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...fuzioNativePredictionQueryKeys.address(contractAddress)[0],
    method: "my_game_list",
    args
  }] as const),
  myPendingReward: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...fuzioNativePredictionQueryKeys.address(contractAddress)[0],
    method: "my_pending_reward",
    args
  }] as const),
  myPendingRewardRounds: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...fuzioNativePredictionQueryKeys.address(contractAddress)[0],
    method: "my_pending_reward_rounds",
    args
  }] as const),
  getUsersPerRound: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...fuzioNativePredictionQueryKeys.address(contractAddress)[0],
    method: "get_users_per_round",
    args
  }] as const),
  myPendingRewardRound: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...fuzioNativePredictionQueryKeys.address(contractAddress)[0],
    method: "my_pending_reward_round",
    args
  }] as const),
  getClaimInfoPerRound: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...fuzioNativePredictionQueryKeys.address(contractAddress)[0],
    method: "get_claim_info_per_round",
    args
  }] as const),
  getClaimInfoByUser: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...fuzioNativePredictionQueryKeys.address(contractAddress)[0],
    method: "get_claim_info_by_user",
    args
  }] as const),
  totalSpent: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...fuzioNativePredictionQueryKeys.address(contractAddress)[0],
    method: "total_spent",
    args
  }] as const),
  getAdmins: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...fuzioNativePredictionQueryKeys.address(contractAddress)[0],
    method: "get_admins",
    args
  }] as const)
};
export const fuzioNativePredictionQueries = {
  config: <TData = Config,>({
    client,
    options
  }: FuzioNativePredictionConfigQuery<TData>): UseQueryOptions<Config, Error, TData> => ({
    queryKey: fuzioNativePredictionQueryKeys.config(client?.contractAddress),
    queryFn: () => client.config(),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  status: <TData = StatusResponse,>({
    client,
    options
  }: FuzioNativePredictionStatusQuery<TData>): UseQueryOptions<StatusResponse, Error, TData> => ({
    queryKey: fuzioNativePredictionQueryKeys.status(client?.contractAddress),
    queryFn: () => client.status(),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  myCurrentPosition: <TData = MyCurrentPositionResponse,>({
    client,
    args,
    options
  }: FuzioNativePredictionMyCurrentPositionQuery<TData>): UseQueryOptions<MyCurrentPositionResponse, Error, TData> => ({
    queryKey: fuzioNativePredictionQueryKeys.myCurrentPosition(client?.contractAddress, args),
    queryFn: () => client.myCurrentPosition({
      address: args.address
    }),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  finishedRound: <TData = FinishedRound,>({
    client,
    args,
    options
  }: FuzioNativePredictionFinishedRoundQuery<TData>): UseQueryOptions<FinishedRound, Error, TData> => ({
    queryKey: fuzioNativePredictionQueryKeys.finishedRound(client?.contractAddress, args),
    queryFn: () => client.finishedRound({
      roundId: args.roundId
    }),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  myGameList: <TData = MyGameResponse,>({
    client,
    args,
    options
  }: FuzioNativePredictionMyGameListQuery<TData>): UseQueryOptions<MyGameResponse, Error, TData> => ({
    queryKey: fuzioNativePredictionQueryKeys.myGameList(client?.contractAddress, args),
    queryFn: () => client.myGameList({
      limit: args.limit,
      player: args.player,
      startAfter: args.startAfter
    }),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  myPendingReward: <TData = PendingRewardResponse,>({
    client,
    args,
    options
  }: FuzioNativePredictionMyPendingRewardQuery<TData>): UseQueryOptions<PendingRewardResponse, Error, TData> => ({
    queryKey: fuzioNativePredictionQueryKeys.myPendingReward(client?.contractAddress, args),
    queryFn: () => client.myPendingReward({
      player: args.player
    }),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  myPendingRewardRounds: <TData = PendingRewardRoundsResponse,>({
    client,
    args,
    options
  }: FuzioNativePredictionMyPendingRewardRoundsQuery<TData>): UseQueryOptions<PendingRewardRoundsResponse, Error, TData> => ({
    queryKey: fuzioNativePredictionQueryKeys.myPendingRewardRounds(client?.contractAddress, args),
    queryFn: () => client.myPendingRewardRounds({
      player: args.player
    }),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getUsersPerRound: <TData = RoundUsersResponse,>({
    client,
    args,
    options
  }: FuzioNativePredictionGetUsersPerRoundQuery<TData>): UseQueryOptions<RoundUsersResponse, Error, TData> => ({
    queryKey: fuzioNativePredictionQueryKeys.getUsersPerRound(client?.contractAddress, args),
    queryFn: () => client.getUsersPerRound({
      limit: args.limit,
      roundId: args.roundId,
      startAfter: args.startAfter
    }),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  myPendingRewardRound: <TData = PendingRewardResponse,>({
    client,
    args,
    options
  }: FuzioNativePredictionMyPendingRewardRoundQuery<TData>): UseQueryOptions<PendingRewardResponse, Error, TData> => ({
    queryKey: fuzioNativePredictionQueryKeys.myPendingRewardRound(client?.contractAddress, args),
    queryFn: () => client.myPendingRewardRound({
      player: args.player,
      roundId: args.roundId
    }),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getClaimInfoPerRound: <TData = ClaimInfoResponse,>({
    client,
    args,
    options
  }: FuzioNativePredictionGetClaimInfoPerRoundQuery<TData>): UseQueryOptions<ClaimInfoResponse, Error, TData> => ({
    queryKey: fuzioNativePredictionQueryKeys.getClaimInfoPerRound(client?.contractAddress, args),
    queryFn: () => client.getClaimInfoPerRound({
      limit: args.limit,
      roundId: args.roundId,
      startAfter: args.startAfter
    }),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getClaimInfoByUser: <TData = ClaimInfoResponse,>({
    client,
    args,
    options
  }: FuzioNativePredictionGetClaimInfoByUserQuery<TData>): UseQueryOptions<ClaimInfoResponse, Error, TData> => ({
    queryKey: fuzioNativePredictionQueryKeys.getClaimInfoByUser(client?.contractAddress, args),
    queryFn: () => client.getClaimInfoByUser({
      limit: args.limit,
      player: args.player,
      startAfter: args.startAfter
    }),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  totalSpent: <TData = TotalSpentResponse,>({
    client,
    args,
    options
  }: FuzioNativePredictionTotalSpentQuery<TData>): UseQueryOptions<TotalSpentResponse, Error, TData> => ({
    queryKey: fuzioNativePredictionQueryKeys.totalSpent(client?.contractAddress, args),
    queryFn: () => client.totalSpent({
      player: args.player
    }),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getAdmins: <TData = AdminsResponse,>({
    client,
    options
  }: FuzioNativePredictionGetAdminsQuery<TData>): UseQueryOptions<AdminsResponse, Error, TData> => ({
    queryKey: fuzioNativePredictionQueryKeys.getAdmins(client?.contractAddress),
    queryFn: () => client.getAdmins(),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface FuzioNativePredictionReactQuery<TResponse, TData = TResponse> {
  client: FuzioNativePredictionQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface FuzioNativePredictionGetAdminsQuery<TData> extends FuzioNativePredictionReactQuery<AdminsResponse, TData> {}
export function useFuzioNativePredictionGetAdminsQuery<TData = AdminsResponse>({
  client,
  options
}: FuzioNativePredictionGetAdminsQuery<TData>) {
  return useQuery<AdminsResponse, Error, TData>(fuzioNativePredictionQueryKeys.getAdmins(client.contractAddress), () => client.getAdmins(), options);
}
export interface FuzioNativePredictionTotalSpentQuery<TData> extends FuzioNativePredictionReactQuery<TotalSpentResponse, TData> {
  args: {
    player: Addr;
  };
}
export function useFuzioNativePredictionTotalSpentQuery<TData = TotalSpentResponse>({
  client,
  args,
  options
}: FuzioNativePredictionTotalSpentQuery<TData>) {
  return useQuery<TotalSpentResponse, Error, TData>(fuzioNativePredictionQueryKeys.totalSpent(client.contractAddress, args), () => client.totalSpent({
    player: args.player
  }), options);
}
export interface FuzioNativePredictionGetClaimInfoByUserQuery<TData> extends FuzioNativePredictionReactQuery<ClaimInfoResponse, TData> {
  args: {
    limit?: number;
    player: Addr;
    startAfter?: Uint128;
  };
}
export function useFuzioNativePredictionGetClaimInfoByUserQuery<TData = ClaimInfoResponse>({
  client,
  args,
  options
}: FuzioNativePredictionGetClaimInfoByUserQuery<TData>) {
  return useQuery<ClaimInfoResponse, Error, TData>(fuzioNativePredictionQueryKeys.getClaimInfoByUser(client.contractAddress, args), () => client.getClaimInfoByUser({
    limit: args.limit,
    player: args.player,
    startAfter: args.startAfter
  }), options);
}
export interface FuzioNativePredictionGetClaimInfoPerRoundQuery<TData> extends FuzioNativePredictionReactQuery<ClaimInfoResponse, TData> {
  args: {
    limit?: number;
    roundId: Uint128;
    startAfter?: Addr;
  };
}
export function useFuzioNativePredictionGetClaimInfoPerRoundQuery<TData = ClaimInfoResponse>({
  client,
  args,
  options
}: FuzioNativePredictionGetClaimInfoPerRoundQuery<TData>) {
  return useQuery<ClaimInfoResponse, Error, TData>(fuzioNativePredictionQueryKeys.getClaimInfoPerRound(client.contractAddress, args), () => client.getClaimInfoPerRound({
    limit: args.limit,
    roundId: args.roundId,
    startAfter: args.startAfter
  }), options);
}
export interface FuzioNativePredictionMyPendingRewardRoundQuery<TData> extends FuzioNativePredictionReactQuery<PendingRewardResponse, TData> {
  args: {
    player: Addr;
    roundId: Uint128;
  };
}
export function useFuzioNativePredictionMyPendingRewardRoundQuery<TData = PendingRewardResponse>({
  client,
  args,
  options
}: FuzioNativePredictionMyPendingRewardRoundQuery<TData>) {
  return useQuery<PendingRewardResponse, Error, TData>(fuzioNativePredictionQueryKeys.myPendingRewardRound(client.contractAddress, args), () => client.myPendingRewardRound({
    player: args.player,
    roundId: args.roundId
  }), options);
}
export interface FuzioNativePredictionGetUsersPerRoundQuery<TData> extends FuzioNativePredictionReactQuery<RoundUsersResponse, TData> {
  args: {
    limit?: number;
    roundId: Uint128;
    startAfter?: Addr;
  };
}
export function useFuzioNativePredictionGetUsersPerRoundQuery<TData = RoundUsersResponse>({
  client,
  args,
  options
}: FuzioNativePredictionGetUsersPerRoundQuery<TData>) {
  return useQuery<RoundUsersResponse, Error, TData>(fuzioNativePredictionQueryKeys.getUsersPerRound(client.contractAddress, args), () => client.getUsersPerRound({
    limit: args.limit,
    roundId: args.roundId,
    startAfter: args.startAfter
  }), options);
}
export interface FuzioNativePredictionMyPendingRewardRoundsQuery<TData> extends FuzioNativePredictionReactQuery<PendingRewardRoundsResponse, TData> {
  args: {
    player: Addr;
  };
}
export function useFuzioNativePredictionMyPendingRewardRoundsQuery<TData = PendingRewardRoundsResponse>({
  client,
  args,
  options
}: FuzioNativePredictionMyPendingRewardRoundsQuery<TData>) {
  return useQuery<PendingRewardRoundsResponse, Error, TData>(fuzioNativePredictionQueryKeys.myPendingRewardRounds(client.contractAddress, args), () => client.myPendingRewardRounds({
    player: args.player
  }), options);
}
export interface FuzioNativePredictionMyPendingRewardQuery<TData> extends FuzioNativePredictionReactQuery<PendingRewardResponse, TData> {
  args: {
    player: Addr;
  };
}
export function useFuzioNativePredictionMyPendingRewardQuery<TData = PendingRewardResponse>({
  client,
  args,
  options
}: FuzioNativePredictionMyPendingRewardQuery<TData>) {
  return useQuery<PendingRewardResponse, Error, TData>(fuzioNativePredictionQueryKeys.myPendingReward(client.contractAddress, args), () => client.myPendingReward({
    player: args.player
  }), options);
}
export interface FuzioNativePredictionMyGameListQuery<TData> extends FuzioNativePredictionReactQuery<MyGameResponse, TData> {
  args: {
    limit?: number;
    player: Addr;
    startAfter?: Uint128;
  };
}
export function useFuzioNativePredictionMyGameListQuery<TData = MyGameResponse>({
  client,
  args,
  options
}: FuzioNativePredictionMyGameListQuery<TData>) {
  return useQuery<MyGameResponse, Error, TData>(fuzioNativePredictionQueryKeys.myGameList(client.contractAddress, args), () => client.myGameList({
    limit: args.limit,
    player: args.player,
    startAfter: args.startAfter
  }), options);
}
export interface FuzioNativePredictionFinishedRoundQuery<TData> extends FuzioNativePredictionReactQuery<FinishedRound, TData> {
  args: {
    roundId: Uint128;
  };
}
export function useFuzioNativePredictionFinishedRoundQuery<TData = FinishedRound>({
  client,
  args,
  options
}: FuzioNativePredictionFinishedRoundQuery<TData>) {
  return useQuery<FinishedRound, Error, TData>(fuzioNativePredictionQueryKeys.finishedRound(client.contractAddress, args), () => client.finishedRound({
    roundId: args.roundId
  }), options);
}
export interface FuzioNativePredictionMyCurrentPositionQuery<TData> extends FuzioNativePredictionReactQuery<MyCurrentPositionResponse, TData> {
  args: {
    address: string;
  };
}
export function useFuzioNativePredictionMyCurrentPositionQuery<TData = MyCurrentPositionResponse>({
  client,
  args,
  options
}: FuzioNativePredictionMyCurrentPositionQuery<TData>) {
  return useQuery<MyCurrentPositionResponse, Error, TData>(fuzioNativePredictionQueryKeys.myCurrentPosition(client.contractAddress, args), () => client.myCurrentPosition({
    address: args.address
  }), options);
}
export interface FuzioNativePredictionStatusQuery<TData> extends FuzioNativePredictionReactQuery<StatusResponse, TData> {}
export function useFuzioNativePredictionStatusQuery<TData = StatusResponse>({
  client,
  options
}: FuzioNativePredictionStatusQuery<TData>) {
  return useQuery<StatusResponse, Error, TData>(fuzioNativePredictionQueryKeys.status(client.contractAddress), () => client.status(), options);
}
export interface FuzioNativePredictionConfigQuery<TData> extends FuzioNativePredictionReactQuery<Config, TData> {}
export function useFuzioNativePredictionConfigQuery<TData = Config>({
  client,
  options
}: FuzioNativePredictionConfigQuery<TData>) {
  return useQuery<Config, Error, TData>(fuzioNativePredictionQueryKeys.config(client.contractAddress), () => client.config(), options);
}
export interface FuzioNativePredictionModifyDevWalletMutation {
  client: FuzioNativePredictionClient;
  msg: {
    newDevWallets: WalletInfo[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFuzioNativePredictionModifyDevWalletMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioNativePredictionModifyDevWalletMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, FuzioNativePredictionModifyDevWalletMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.modifyDevWallet(msg, fee, memo, funds), options);
}
export interface FuzioNativePredictionRemoveAdminMutation {
  client: FuzioNativePredictionClient;
  msg: {
    oldAdmin: Addr;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFuzioNativePredictionRemoveAdminMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioNativePredictionRemoveAdminMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, FuzioNativePredictionRemoveAdminMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.removeAdmin(msg, fee, memo, funds), options);
}
export interface FuzioNativePredictionAddAdminMutation {
  client: FuzioNativePredictionClient;
  msg: {
    newAdmin: Addr;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFuzioNativePredictionAddAdminMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioNativePredictionAddAdminMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, FuzioNativePredictionAddAdminMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.addAdmin(msg, fee, memo, funds), options);
}
export interface FuzioNativePredictionResumeMutation {
  client: FuzioNativePredictionClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFuzioNativePredictionResumeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioNativePredictionResumeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, FuzioNativePredictionResumeMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.resume(fee, memo, funds), options);
}
export interface FuzioNativePredictionHaltMutation {
  client: FuzioNativePredictionClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFuzioNativePredictionHaltMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioNativePredictionHaltMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, FuzioNativePredictionHaltMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.halt(fee, memo, funds), options);
}
export interface FuzioNativePredictionCollectionWinningRoundMutation {
  client: FuzioNativePredictionClient;
  msg: {
    roundId: Uint128;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFuzioNativePredictionCollectionWinningRoundMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioNativePredictionCollectionWinningRoundMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, FuzioNativePredictionCollectionWinningRoundMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.collectionWinningRound(msg, fee, memo, funds), options);
}
export interface FuzioNativePredictionCollectWinningsMutation {
  client: FuzioNativePredictionClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFuzioNativePredictionCollectWinningsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioNativePredictionCollectWinningsMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, FuzioNativePredictionCollectWinningsMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.collectWinnings(fee, memo, funds), options);
}
export interface FuzioNativePredictionCloseRoundMutation {
  client: FuzioNativePredictionClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFuzioNativePredictionCloseRoundMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioNativePredictionCloseRoundMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, FuzioNativePredictionCloseRoundMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.closeRound(fee, memo, funds), options);
}
export interface FuzioNativePredictionBetBearMutation {
  client: FuzioNativePredictionClient;
  msg: {
    amount: Uint128;
    roundId: Uint128;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFuzioNativePredictionBetBearMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioNativePredictionBetBearMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, FuzioNativePredictionBetBearMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.betBear(msg, fee, memo, funds), options);
}
export interface FuzioNativePredictionBetBullMutation {
  client: FuzioNativePredictionClient;
  msg: {
    amount: Uint128;
    roundId: Uint128;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFuzioNativePredictionBetBullMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioNativePredictionBetBullMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, FuzioNativePredictionBetBullMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.betBull(msg, fee, memo, funds), options);
}
export interface FuzioNativePredictionUpdateConfigMutation {
  client: FuzioNativePredictionClient;
  msg: {
    config: Config;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFuzioNativePredictionUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioNativePredictionUpdateConfigMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, FuzioNativePredictionUpdateConfigMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateConfig(msg, fee, memo, funds), options);
}