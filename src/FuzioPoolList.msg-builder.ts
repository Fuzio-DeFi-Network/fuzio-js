/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Decimal, Addr, Uint128, InstantiateMsg, WalletInfo, Pool, Token, Chain, GasPrice, IbcChannels, Coin, ExecuteMsg, QueryMsg, ConfigResp, Config, PoolsResp, TokensResp } from "./FuzioPoolList.types";
import { CamelCasedProperties } from "type-fest";
export abstract class FuzioPoolListExecuteMsgBuilder {
  static createPool = ({
    burnRatio,
    swapFee,
    token1,
    token2
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    create_pool: unknown;
  }>["create_pool"]>): ExecuteMsg => {
    return {
      create_pool: ({
        burn_ratio: burnRatio,
        swap_fee: swapFee,
        token1,
        token2
      } as const)
    };
  };
  static listToken = ({
    chain,
    decimal,
    denom,
    fullName,
    isIbcCoin,
    isNativeCoin,
    logoUri,
    symbol
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    list_token: unknown;
  }>["list_token"]>): ExecuteMsg => {
    return {
      list_token: ({
        chain,
        decimal,
        denom,
        full_name: fullName,
        is_ibc_coin: isIbcCoin,
        is_native_coin: isNativeCoin,
        logo_uri: logoUri,
        symbol
      } as const)
    };
  };
  static changeConfig = ({
    burnFeePercent,
    devWalletLists,
    poolCreationFee,
    tokenListingFee
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    change_config: unknown;
  }>["change_config"]>): ExecuteMsg => {
    return {
      change_config: ({
        burn_fee_percent: burnFeePercent,
        dev_wallet_lists: devWalletLists,
        pool_creation_fee: poolCreationFee,
        token_listing_fee: tokenListingFee
      } as const)
    };
  };
}
export abstract class FuzioPoolListQueryMsgBuilder {
  static tokens = (): QueryMsg => {
    return {
      tokens: ({} as const)
    };
  };
  static pools = (): QueryMsg => {
    return {
      pools: ({} as const)
    };
  };
  static config = (): QueryMsg => {
    return {
      config: ({} as const)
    };
  };
}