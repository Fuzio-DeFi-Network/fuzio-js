/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Decimal, Addr, Uint128, InstantiateMsg, WalletInfo, Pool, Token, Chain, GasPrice, IbcChannels, Coin, ExecuteMsg, QueryMsg, ConfigResp, Config, PoolsResp, TokensResp } from "./FuzioPoolList.types";
export interface FuzioPoolListMessage {
  contractAddress: string;
  sender: string;
  createPool: ({
    burnRatio,
    swapFee,
    token1,
    token2
  }: {
    burnRatio: number;
    swapFee: string;
    token1: string;
    token2: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  listToken: ({
    chain,
    decimal,
    denom,
    fullName,
    isIbcCoin,
    isNativeCoin,
    logoUri,
    symbol
  }: {
    chain: Chain;
    decimal: number;
    denom: string;
    fullName: string;
    isIbcCoin: boolean;
    isNativeCoin: boolean;
    logoUri: string;
    symbol: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  changeConfig: ({
    burnFeePercent,
    devWalletLists,
    poolCreationFee,
    tokenListingFee
  }: {
    burnFeePercent: number;
    devWalletLists: WalletInfo[];
    poolCreationFee: Coin;
    tokenListingFee: Coin;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class FuzioPoolListMessageComposer implements FuzioPoolListMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createPool = this.createPool.bind(this);
    this.listToken = this.listToken.bind(this);
    this.changeConfig = this.changeConfig.bind(this);
  }

  createPool = ({
    burnRatio,
    swapFee,
    token1,
    token2
  }: {
    burnRatio: number;
    swapFee: string;
    token1: string;
    token2: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          create_pool: {
            burn_ratio: burnRatio,
            swap_fee: swapFee,
            token1,
            token2
          }
        })),
        funds: _funds
      })
    };
  };
  listToken = ({
    chain,
    decimal,
    denom,
    fullName,
    isIbcCoin,
    isNativeCoin,
    logoUri,
    symbol
  }: {
    chain: Chain;
    decimal: number;
    denom: string;
    fullName: string;
    isIbcCoin: boolean;
    isNativeCoin: boolean;
    logoUri: string;
    symbol: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          list_token: {
            chain,
            decimal,
            denom,
            full_name: fullName,
            is_ibc_coin: isIbcCoin,
            is_native_coin: isNativeCoin,
            logo_uri: logoUri,
            symbol
          }
        })),
        funds: _funds
      })
    };
  };
  changeConfig = ({
    burnFeePercent,
    devWalletLists,
    poolCreationFee,
    tokenListingFee
  }: {
    burnFeePercent: number;
    devWalletLists: WalletInfo[];
    poolCreationFee: Coin;
    tokenListingFee: Coin;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          change_config: {
            burn_fee_percent: burnFeePercent,
            dev_wallet_lists: devWalletLists,
            pool_creation_fee: poolCreationFee,
            token_listing_fee: tokenListingFee
          }
        })),
        funds: _funds
      })
    };
  };
}