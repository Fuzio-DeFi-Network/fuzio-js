/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Addr, Decimal, Uint128, InstantiateMsg, Config, WalletInfo, ExecuteMsg, QueryMsg, MigrateMsg, Timestamp, Uint64, Direction, FinishedRound, AdminsResponse, ClaimInfoResponse, ClaimInfo, RoundUsersResponse, BetInfo, MyCurrentPositionResponse, MyGameResponse, PendingRewardResponse, PendingRewardRoundsResponse, StatusResponse, NextRound, LiveRound, TotalSpentResponse } from "./FuzioNativePrediction.types";
export interface FuzioNativePredictionMsg {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    config
  }: {
    config: Config;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  betBull: ({
    amount,
    roundId
  }: {
    amount: Uint128;
    roundId: Uint128;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  betBear: ({
    amount,
    roundId
  }: {
    amount: Uint128;
    roundId: Uint128;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  closeRound: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  collectWinnings: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  collectionWinningRound: ({
    roundId
  }: {
    roundId: Uint128;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  halt: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  resume: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  addAdmin: ({
    newAdmin
  }: {
    newAdmin: Addr;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeAdmin: ({
    oldAdmin
  }: {
    oldAdmin: Addr;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  modifyDevWallet: ({
    newDevWallets
  }: {
    newDevWallets: WalletInfo[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class FuzioNativePredictionMsgComposer implements FuzioNativePredictionMsg {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.betBull = this.betBull.bind(this);
    this.betBear = this.betBear.bind(this);
    this.closeRound = this.closeRound.bind(this);
    this.collectWinnings = this.collectWinnings.bind(this);
    this.collectionWinningRound = this.collectionWinningRound.bind(this);
    this.halt = this.halt.bind(this);
    this.resume = this.resume.bind(this);
    this.addAdmin = this.addAdmin.bind(this);
    this.removeAdmin = this.removeAdmin.bind(this);
    this.modifyDevWallet = this.modifyDevWallet.bind(this);
  }

  updateConfig = ({
    config
  }: {
    config: Config;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_config: {
            config
          }
        })),
        funds: _funds
      })
    };
  };
  betBull = ({
    amount,
    roundId
  }: {
    amount: Uint128;
    roundId: Uint128;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          bet_bull: {
            amount,
            round_id: roundId
          }
        })),
        funds: _funds
      })
    };
  };
  betBear = ({
    amount,
    roundId
  }: {
    amount: Uint128;
    roundId: Uint128;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          bet_bear: {
            amount,
            round_id: roundId
          }
        })),
        funds: _funds
      })
    };
  };
  closeRound = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          close_round: {}
        })),
        funds: _funds
      })
    };
  };
  collectWinnings = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          collect_winnings: {}
        })),
        funds: _funds
      })
    };
  };
  collectionWinningRound = ({
    roundId
  }: {
    roundId: Uint128;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          collection_winning_round: {
            round_id: roundId
          }
        })),
        funds: _funds
      })
    };
  };
  halt = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          halt: {}
        })),
        funds: _funds
      })
    };
  };
  resume = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          resume: {}
        })),
        funds: _funds
      })
    };
  };
  addAdmin = ({
    newAdmin
  }: {
    newAdmin: Addr;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          add_admin: {
            new_admin: newAdmin
          }
        })),
        funds: _funds
      })
    };
  };
  removeAdmin = ({
    oldAdmin
  }: {
    oldAdmin: Addr;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_admin: {
            old_admin: oldAdmin
          }
        })),
        funds: _funds
      })
    };
  };
  modifyDevWallet = ({
    newDevWallets
  }: {
    newDevWallets: WalletInfo[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          modify_dev_wallet: {
            new_dev_wallets: newDevWallets
          }
        })),
        funds: _funds
      })
    };
  };
}