/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Uint128, InstantiateMsg, IdoInfo, Description, Product, Socials, Team, TeamMember, Coin, ExecuteMsg, QueryMsg, TimeInfo, SaleInfo, Addr, Decimal, State, WalletInfo, UserInfoResponse, UserInfo, UserInfosResponse } from "./FuzioNativeIDO.types";
export interface FuzioNativeIDOReadOnlyInterface {
  contractAddress: string;
  getStateInfo: () => Promise<State>;
  getUserInfo: ({
    address
  }: {
    address: string;
  }) => Promise<UserInfoResponse>;
  getSaleInfo: () => Promise<SaleInfo>;
  getClaimableAmount: ({
    address
  }: {
    address: string;
  }) => Promise<Uint128>;
  getClaimableTime: ({
    address
  }: {
    address: string;
  }) => Promise<TimeInfo>;
  getUserInfos: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }) => Promise<UserInfosResponse>;
}
export class FuzioNativeIDOQueryClient implements FuzioNativeIDOReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getStateInfo = this.getStateInfo.bind(this);
    this.getUserInfo = this.getUserInfo.bind(this);
    this.getSaleInfo = this.getSaleInfo.bind(this);
    this.getClaimableAmount = this.getClaimableAmount.bind(this);
    this.getClaimableTime = this.getClaimableTime.bind(this);
    this.getUserInfos = this.getUserInfos.bind(this);
  }

  getStateInfo = async (): Promise<State> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_state_info: {}
    });
  };
  getUserInfo = async ({
    address
  }: {
    address: string;
  }): Promise<UserInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_user_info: {
        address
      }
    });
  };
  getSaleInfo = async (): Promise<SaleInfo> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_sale_info: {}
    });
  };
  getClaimableAmount = async ({
    address
  }: {
    address: string;
  }): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_claimable_amount: {
        address
      }
    });
  };
  getClaimableTime = async ({
    address
  }: {
    address: string;
  }): Promise<TimeInfo> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_claimable_time: {
        address
      }
    });
  };
  getUserInfos = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }): Promise<UserInfosResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_user_infos: {
        limit,
        start_after: startAfter
      }
    });
  };
}
export interface FuzioNativeIDOInterface extends FuzioNativeIDOReadOnlyInterface {
  contractAddress: string;
  sender: string;
  buyToken: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  claimToken: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  changeAdmin: ({
    address
  }: {
    address: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  withdrawTokenNotSoldByAdmin: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class FuzioNativeIDOClient extends FuzioNativeIDOQueryClient implements FuzioNativeIDOInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.buyToken = this.buyToken.bind(this);
    this.claimToken = this.claimToken.bind(this);
    this.changeAdmin = this.changeAdmin.bind(this);
    this.withdrawTokenNotSoldByAdmin = this.withdrawTokenNotSoldByAdmin.bind(this);
  }

  buyToken = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      buy_token: {}
    }, fee, memo, _funds);
  };
  claimToken = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim_token: {}
    }, fee, memo, _funds);
  };
  changeAdmin = async ({
    address
  }: {
    address: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      change_admin: {
        address
      }
    }, fee, memo, _funds);
  };
  withdrawTokenNotSoldByAdmin = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw_token_not_sold_by_admin: {}
    }, fee, memo, _funds);
  };
}