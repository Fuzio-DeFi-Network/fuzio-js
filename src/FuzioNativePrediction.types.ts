/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.28.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Addr = string;
export type Decimal = string;
export type Uint128 = string;
export interface InstantiateMsg {
  config: Config;
}
export interface Config {
  bet_token_denom: string;
  dev_wallet_list: WalletInfo[];
  gaming_fee: Uint128;
  minimum_bet: Uint128;
  next_round_seconds: Uint128;
  token_denom: string;
}
export interface WalletInfo {
  address: Addr;
  ratio: Decimal;
}
export type ExecuteMsg = {
  update_config: {
    config: Config;
  };
} | {
  bet_bull: {
    amount: Uint128;
    round_id: Uint128;
  };
} | {
  bet_bear: {
    amount: Uint128;
    round_id: Uint128;
  };
} | {
  close_round: {};
} | {
  collect_winnings: {};
} | {
  collection_winning_round: {
    round_id: Uint128;
  };
} | {
  halt: {};
} | {
  resume: {};
} | {
  add_admin: {
    new_admin: Addr;
  };
} | {
  remove_admin: {
    old_admin: Addr;
  };
} | {
  modify_dev_wallet: {
    new_dev_wallets: WalletInfo[];
  };
};
export type QueryMsg = {
  config: {};
} | {
  status: {};
} | {
  my_current_position: {
    address: string;
  };
} | {
  finished_round: {
    round_id: Uint128;
  };
} | {
  my_game_list: {
    limit?: number | null;
    player: Addr;
    start_after?: Uint128 | null;
  };
} | {
  my_pending_reward: {
    player: Addr;
  };
} | {
  get_users_per_round: {
    limit?: number | null;
    round_id: Uint128;
    start_after?: Addr | null;
  };
} | {
  my_pending_reward_round: {
    player: Addr;
    round_id: Uint128;
  };
} | {
  get_claim_info_per_round: {
    limit?: number | null;
    round_id: Uint128;
    start_after?: Addr | null;
  };
} | {
  get_claim_info_by_user: {
    limit?: number | null;
    player: Addr;
    start_after?: Uint128 | null;
  };
} | {
  get_admins: {};
};
export interface MigrateMsg {}
export type Timestamp = Uint64;
export type Uint64 = string;
export type Direction = "bull" | "bear";
export interface FinishedRound {
  bear_amount: Uint128;
  bid_time: Timestamp;
  bull_amount: Uint128;
  close_price: Decimal;
  close_time: Timestamp;
  id: Uint128;
  open_price: Decimal;
  open_time: Timestamp;
  winner?: Direction | null;
}
export interface AdminsResponse {
  admins: Addr[];
}
export interface ClaimInfoResponse {
  claim_info: ClaimInfo[];
}
export interface ClaimInfo {
  claimed_amount: Uint128;
  player: Addr;
  round_id: Uint128;
}
export interface RoundUsersResponse {
  round_users: BetInfo[];
}
export interface BetInfo {
  amount: Uint128;
  direction: Direction;
  player: Addr;
  round_id: Uint128;
}
export interface MyCurrentPositionResponse {
  live_bear_amount: Uint128;
  live_bull_amount: Uint128;
  next_bear_amount: Uint128;
  next_bull_amount: Uint128;
}
export interface MyGameResponse {
  my_game_list: BetInfo[];
}
export interface PendingRewardResponse {
  pending_reward: Uint128;
}
export interface StatusResponse {
  bidding_round?: NextRound | null;
  current_time: Timestamp;
  live_round?: LiveRound | null;
}
export interface NextRound {
  bear_amount: Uint128;
  bid_time: Timestamp;
  bull_amount: Uint128;
  close_time: Timestamp;
  id: Uint128;
  open_time: Timestamp;
}
export interface LiveRound {
  bear_amount: Uint128;
  bid_time: Timestamp;
  bull_amount: Uint128;
  close_time: Timestamp;
  id: Uint128;
  open_price: Decimal;
  open_time: Timestamp;
}
export type FuzioNativePredictionExecuteMsg = ExecuteMsg;