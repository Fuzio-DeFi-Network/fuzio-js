/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.28.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Addr, Decimal, Uint128, InstantiateMsg, WalletInfo, ExecuteMsg, Action, Expiration, Timestamp, Uint64, Config, QueryMsg } from "./FuzioIDOInfo.types";
export interface FuzioIDOInfoReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<Config>;
}
export class FuzioIDOInfoQueryClient implements FuzioIDOInfoReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
  }

  config = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
}
export interface FuzioIDOInfoInterface extends FuzioIDOInfoReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    newConfig
  }: {
    newConfig: Config;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  updateOwnership: (action: Action, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class FuzioIDOInfoClient extends FuzioIDOInfoQueryClient implements FuzioIDOInfoInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.updateOwnership = this.updateOwnership.bind(this);
  }

  updateConfig = async ({
    newConfig
  }: {
    newConfig: Config;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        new_config: newConfig
      }
    }, fee, memo, funds);
  };
  updateOwnership = async (action: Action, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_ownership: action
    }, fee, memo, funds);
  };
}