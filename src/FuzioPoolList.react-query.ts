/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Decimal, Addr, Uint128, InstantiateMsg, WalletInfo, Pool, Token, Chain, GasPrice, IbcChannels, Coin, ExecuteMsg, QueryMsg, ConfigResp, Config, PoolsResp, TokensResp } from "./FuzioPoolList.types";
import { FuzioPoolListQueryClient, FuzioPoolListClient } from "./FuzioPoolList.client";
export const fuzioPoolListQueryKeys = {
  contract: ([{
    contract: "fuzioPoolList"
  }] as const),
  address: (contractAddress: string) => ([{ ...fuzioPoolListQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  tokens: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...fuzioPoolListQueryKeys.address(contractAddress)[0],
    method: "tokens",
    args
  }] as const),
  pools: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...fuzioPoolListQueryKeys.address(contractAddress)[0],
    method: "pools",
    args
  }] as const),
  config: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...fuzioPoolListQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const)
};
export const fuzioPoolListQueries = {
  tokens: <TData = TokensResp,>({
    client,
    options
  }: FuzioPoolListTokensQuery<TData>): UseQueryOptions<TokensResp, Error, TData> => ({
    queryKey: fuzioPoolListQueryKeys.tokens(client?.contractAddress),
    queryFn: () => client.tokens(),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  pools: <TData = PoolsResp,>({
    client,
    options
  }: FuzioPoolListPoolsQuery<TData>): UseQueryOptions<PoolsResp, Error, TData> => ({
    queryKey: fuzioPoolListQueryKeys.pools(client?.contractAddress),
    queryFn: () => client.pools(),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  config: <TData = ConfigResp,>({
    client,
    options
  }: FuzioPoolListConfigQuery<TData>): UseQueryOptions<ConfigResp, Error, TData> => ({
    queryKey: fuzioPoolListQueryKeys.config(client?.contractAddress),
    queryFn: () => client.config(),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface FuzioPoolListReactQuery<TResponse, TData = TResponse> {
  client: FuzioPoolListQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface FuzioPoolListConfigQuery<TData> extends FuzioPoolListReactQuery<ConfigResp, TData> {}
export function useFuzioPoolListConfigQuery<TData = ConfigResp>({
  client,
  options
}: FuzioPoolListConfigQuery<TData>) {
  return useQuery<ConfigResp, Error, TData>(fuzioPoolListQueryKeys.config(client.contractAddress), () => client.config(), options);
}
export interface FuzioPoolListPoolsQuery<TData> extends FuzioPoolListReactQuery<PoolsResp, TData> {}
export function useFuzioPoolListPoolsQuery<TData = PoolsResp>({
  client,
  options
}: FuzioPoolListPoolsQuery<TData>) {
  return useQuery<PoolsResp, Error, TData>(fuzioPoolListQueryKeys.pools(client.contractAddress), () => client.pools(), options);
}
export interface FuzioPoolListTokensQuery<TData> extends FuzioPoolListReactQuery<TokensResp, TData> {}
export function useFuzioPoolListTokensQuery<TData = TokensResp>({
  client,
  options
}: FuzioPoolListTokensQuery<TData>) {
  return useQuery<TokensResp, Error, TData>(fuzioPoolListQueryKeys.tokens(client.contractAddress), () => client.tokens(), options);
}
export interface FuzioPoolListChangeConfigMutation {
  client: FuzioPoolListClient;
  msg: {
    burnFeePercent: number;
    devWalletLists: WalletInfo[];
    poolCreationFee: Coin;
    tokenListingFee: Coin;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFuzioPoolListChangeConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioPoolListChangeConfigMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, FuzioPoolListChangeConfigMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.changeConfig(msg, fee, memo, funds), options);
}
export interface FuzioPoolListListTokenMutation {
  client: FuzioPoolListClient;
  msg: {
    chain: Chain;
    decimal: number;
    denom: string;
    fullName: string;
    isIbcCoin: boolean;
    isNativeCoin: boolean;
    logoUri: string;
    symbol: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFuzioPoolListListTokenMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioPoolListListTokenMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, FuzioPoolListListTokenMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.listToken(msg, fee, memo, funds), options);
}
export interface FuzioPoolListCreatePoolMutation {
  client: FuzioPoolListClient;
  msg: {
    burnRatio: number;
    swapFee: string;
    token1: string;
    token2: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFuzioPoolListCreatePoolMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioPoolListCreatePoolMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, FuzioPoolListCreatePoolMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.createPool(msg, fee, memo, funds), options);
}