/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Addr, Decimal, Uint128, InstantiateMsg, Config, WalletInfo, ExecuteMsg, QueryMsg, MigrateMsg, Timestamp, Uint64, Direction, FinishedRound, AdminsResponse, ClaimInfoResponse, ClaimInfo, RoundUsersResponse, BetInfo, MyCurrentPositionResponse, MyGameResponse, PendingRewardResponse, PendingRewardRoundsResponse, StatusResponse, NextRound, LiveRound, TotalSpentResponse } from "./FuzioNativePrediction.types";
import { CamelCasedProperties } from "type-fest";
export abstract class FuzioNativePredictionExecuteMsgBuilder {
  static updateConfig = ({
    config
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    update_config: unknown;
  }>["update_config"]>): ExecuteMsg => {
    return {
      update_config: ({
        config
      } as const)
    };
  };
  static betBull = ({
    amount,
    roundId
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    bet_bull: unknown;
  }>["bet_bull"]>): ExecuteMsg => {
    return {
      bet_bull: ({
        amount,
        round_id: roundId
      } as const)
    };
  };
  static betBear = ({
    amount,
    roundId
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    bet_bear: unknown;
  }>["bet_bear"]>): ExecuteMsg => {
    return {
      bet_bear: ({
        amount,
        round_id: roundId
      } as const)
    };
  };
  static closeRound = (): ExecuteMsg => {
    return {
      close_round: ({} as const)
    };
  };
  static collectWinnings = (): ExecuteMsg => {
    return {
      collect_winnings: ({} as const)
    };
  };
  static collectionWinningRound = ({
    roundId
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    collection_winning_round: unknown;
  }>["collection_winning_round"]>): ExecuteMsg => {
    return {
      collection_winning_round: ({
        round_id: roundId
      } as const)
    };
  };
  static halt = (): ExecuteMsg => {
    return {
      halt: ({} as const)
    };
  };
  static resume = (): ExecuteMsg => {
    return {
      resume: ({} as const)
    };
  };
  static addAdmin = ({
    newAdmin
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    add_admin: unknown;
  }>["add_admin"]>): ExecuteMsg => {
    return {
      add_admin: ({
        new_admin: newAdmin
      } as const)
    };
  };
  static removeAdmin = ({
    oldAdmin
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    remove_admin: unknown;
  }>["remove_admin"]>): ExecuteMsg => {
    return {
      remove_admin: ({
        old_admin: oldAdmin
      } as const)
    };
  };
  static modifyDevWallet = ({
    newDevWallets
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    modify_dev_wallet: unknown;
  }>["modify_dev_wallet"]>): ExecuteMsg => {
    return {
      modify_dev_wallet: ({
        new_dev_wallets: newDevWallets
      } as const)
    };
  };
}
export abstract class FuzioNativePredictionQueryMsgBuilder {
  static config = (): QueryMsg => {
    return {
      config: ({} as const)
    };
  };
  static status = (): QueryMsg => {
    return {
      status: ({} as const)
    };
  };
  static myCurrentPosition = ({
    address
  }: CamelCasedProperties<Extract<QueryMsg, {
    my_current_position: unknown;
  }>["my_current_position"]>): QueryMsg => {
    return {
      my_current_position: ({
        address
      } as const)
    };
  };
  static finishedRound = ({
    roundId
  }: CamelCasedProperties<Extract<QueryMsg, {
    finished_round: unknown;
  }>["finished_round"]>): QueryMsg => {
    return {
      finished_round: ({
        round_id: roundId
      } as const)
    };
  };
  static myGameList = ({
    limit,
    player,
    startAfter
  }: CamelCasedProperties<Extract<QueryMsg, {
    my_game_list: unknown;
  }>["my_game_list"]>): QueryMsg => {
    return {
      my_game_list: ({
        limit,
        player,
        start_after: startAfter
      } as const)
    };
  };
  static myPendingReward = ({
    player
  }: CamelCasedProperties<Extract<QueryMsg, {
    my_pending_reward: unknown;
  }>["my_pending_reward"]>): QueryMsg => {
    return {
      my_pending_reward: ({
        player
      } as const)
    };
  };
  static myPendingRewardRounds = ({
    player
  }: CamelCasedProperties<Extract<QueryMsg, {
    my_pending_reward_rounds: unknown;
  }>["my_pending_reward_rounds"]>): QueryMsg => {
    return {
      my_pending_reward_rounds: ({
        player
      } as const)
    };
  };
  static getUsersPerRound = ({
    limit,
    roundId,
    startAfter
  }: CamelCasedProperties<Extract<QueryMsg, {
    get_users_per_round: unknown;
  }>["get_users_per_round"]>): QueryMsg => {
    return {
      get_users_per_round: ({
        limit,
        round_id: roundId,
        start_after: startAfter
      } as const)
    };
  };
  static myPendingRewardRound = ({
    player,
    roundId
  }: CamelCasedProperties<Extract<QueryMsg, {
    my_pending_reward_round: unknown;
  }>["my_pending_reward_round"]>): QueryMsg => {
    return {
      my_pending_reward_round: ({
        player,
        round_id: roundId
      } as const)
    };
  };
  static getClaimInfoPerRound = ({
    limit,
    roundId,
    startAfter
  }: CamelCasedProperties<Extract<QueryMsg, {
    get_claim_info_per_round: unknown;
  }>["get_claim_info_per_round"]>): QueryMsg => {
    return {
      get_claim_info_per_round: ({
        limit,
        round_id: roundId,
        start_after: startAfter
      } as const)
    };
  };
  static getClaimInfoByUser = ({
    limit,
    player,
    startAfter
  }: CamelCasedProperties<Extract<QueryMsg, {
    get_claim_info_by_user: unknown;
  }>["get_claim_info_by_user"]>): QueryMsg => {
    return {
      get_claim_info_by_user: ({
        limit,
        player,
        start_after: startAfter
      } as const)
    };
  };
  static totalSpent = ({
    player
  }: CamelCasedProperties<Extract<QueryMsg, {
    total_spent: unknown;
  }>["total_spent"]>): QueryMsg => {
    return {
      total_spent: ({
        player
      } as const)
    };
  };
  static getAdmins = (): QueryMsg => {
    return {
      get_admins: ({} as const)
    };
  };
}