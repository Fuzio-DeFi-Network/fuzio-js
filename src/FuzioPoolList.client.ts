/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Decimal, Addr, Uint128, InstantiateMsg, WalletInfo, Pool, Token, Chain, GasPrice, IbcChannels, Coin, ExecuteMsg, QueryMsg, ConfigResp, Config, PoolsResp, TokensResp } from "./FuzioPoolList.types";
export interface FuzioPoolListReadOnlyInterface {
  contractAddress: string;
  tokens: () => Promise<TokensResp>;
  pools: () => Promise<PoolsResp>;
  config: () => Promise<ConfigResp>;
}
export class FuzioPoolListQueryClient implements FuzioPoolListReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.tokens = this.tokens.bind(this);
    this.pools = this.pools.bind(this);
    this.config = this.config.bind(this);
  }

  tokens = async (): Promise<TokensResp> => {
    return this.client.queryContractSmart(this.contractAddress, {
      tokens: {}
    });
  };
  pools = async (): Promise<PoolsResp> => {
    return this.client.queryContractSmart(this.contractAddress, {
      pools: {}
    });
  };
  config = async (): Promise<ConfigResp> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
}
export interface FuzioPoolListInterface {
  contractAddress: string;
  sender: string;
  createPool: ({
    burnRatio,
    swapFee,
    token1,
    token2
  }: {
    burnRatio: number;
    swapFee: string;
    token1: string;
    token2: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  listToken: ({
    chain,
    decimal,
    denom,
    fullName,
    isIbcCoin,
    isNativeCoin,
    logoUri,
    symbol
  }: {
    chain: Chain;
    decimal: number;
    denom: string;
    fullName: string;
    isIbcCoin: boolean;
    isNativeCoin: boolean;
    logoUri: string;
    symbol: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  changeConfig: ({
    burnFeePercent,
    devWalletLists,
    poolCreationFee,
    tokenListingFee
  }: {
    burnFeePercent: number;
    devWalletLists: WalletInfo[];
    poolCreationFee: Coin;
    tokenListingFee: Coin;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class FuzioPoolListClient implements FuzioPoolListInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createPool = this.createPool.bind(this);
    this.listToken = this.listToken.bind(this);
    this.changeConfig = this.changeConfig.bind(this);
  }

  createPool = async ({
    burnRatio,
    swapFee,
    token1,
    token2
  }: {
    burnRatio: number;
    swapFee: string;
    token1: string;
    token2: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_pool: {
        burn_ratio: burnRatio,
        swap_fee: swapFee,
        token1,
        token2
      }
    }, fee, memo, _funds);
  };
  listToken = async ({
    chain,
    decimal,
    denom,
    fullName,
    isIbcCoin,
    isNativeCoin,
    logoUri,
    symbol
  }: {
    chain: Chain;
    decimal: number;
    denom: string;
    fullName: string;
    isIbcCoin: boolean;
    isNativeCoin: boolean;
    logoUri: string;
    symbol: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      list_token: {
        chain,
        decimal,
        denom,
        full_name: fullName,
        is_ibc_coin: isIbcCoin,
        is_native_coin: isNativeCoin,
        logo_uri: logoUri,
        symbol
      }
    }, fee, memo, _funds);
  };
  changeConfig = async ({
    burnFeePercent,
    devWalletLists,
    poolCreationFee,
    tokenListingFee
  }: {
    burnFeePercent: number;
    devWalletLists: WalletInfo[];
    poolCreationFee: Coin;
    tokenListingFee: Coin;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      change_config: {
        burn_fee_percent: burnFeePercent,
        dev_wallet_lists: devWalletLists,
        pool_creation_fee: poolCreationFee,
        token_listing_fee: tokenListingFee
      }
    }, fee, memo, _funds);
  };
}