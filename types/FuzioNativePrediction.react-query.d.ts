/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { UseQueryOptions, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Addr, Uint128, Config, WalletInfo, FinishedRound, AdminsResponse, ClaimInfoResponse, RoundUsersResponse, MyCurrentPositionResponse, MyGameResponse, PendingRewardResponse, PendingRewardRoundsResponse, StatusResponse, TotalSpentResponse } from "./FuzioNativePrediction.types";
import { FuzioNativePredictionQueryClient, FuzioNativePredictionClient } from "./FuzioNativePrediction.client";
export declare const fuzioNativePredictionQueryKeys: {
    contract: readonly [{
        readonly contract: "fuzioNativePrediction";
    }];
    address: (contractAddress: string) => readonly [{
        readonly address: string;
        readonly contract: "fuzioNativePrediction";
    }];
    config: (contractAddress: string, args?: Record<string, unknown>) => readonly [{
        readonly method: "config";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string;
        readonly contract: "fuzioNativePrediction";
    }];
    status: (contractAddress: string, args?: Record<string, unknown>) => readonly [{
        readonly method: "status";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string;
        readonly contract: "fuzioNativePrediction";
    }];
    myCurrentPosition: (contractAddress: string, args?: Record<string, unknown>) => readonly [{
        readonly method: "my_current_position";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string;
        readonly contract: "fuzioNativePrediction";
    }];
    finishedRound: (contractAddress: string, args?: Record<string, unknown>) => readonly [{
        readonly method: "finished_round";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string;
        readonly contract: "fuzioNativePrediction";
    }];
    myGameList: (contractAddress: string, args?: Record<string, unknown>) => readonly [{
        readonly method: "my_game_list";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string;
        readonly contract: "fuzioNativePrediction";
    }];
    myPendingReward: (contractAddress: string, args?: Record<string, unknown>) => readonly [{
        readonly method: "my_pending_reward";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string;
        readonly contract: "fuzioNativePrediction";
    }];
    myPendingRewardRounds: (contractAddress: string, args?: Record<string, unknown>) => readonly [{
        readonly method: "my_pending_reward_rounds";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string;
        readonly contract: "fuzioNativePrediction";
    }];
    getUsersPerRound: (contractAddress: string, args?: Record<string, unknown>) => readonly [{
        readonly method: "get_users_per_round";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string;
        readonly contract: "fuzioNativePrediction";
    }];
    myPendingRewardRound: (contractAddress: string, args?: Record<string, unknown>) => readonly [{
        readonly method: "my_pending_reward_round";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string;
        readonly contract: "fuzioNativePrediction";
    }];
    getClaimInfoPerRound: (contractAddress: string, args?: Record<string, unknown>) => readonly [{
        readonly method: "get_claim_info_per_round";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string;
        readonly contract: "fuzioNativePrediction";
    }];
    getClaimInfoByUser: (contractAddress: string, args?: Record<string, unknown>) => readonly [{
        readonly method: "get_claim_info_by_user";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string;
        readonly contract: "fuzioNativePrediction";
    }];
    totalSpent: (contractAddress: string, args?: Record<string, unknown>) => readonly [{
        readonly method: "total_spent";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string;
        readonly contract: "fuzioNativePrediction";
    }];
    getAdmins: (contractAddress: string, args?: Record<string, unknown>) => readonly [{
        readonly method: "get_admins";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string;
        readonly contract: "fuzioNativePrediction";
    }];
};
export declare const fuzioNativePredictionQueries: {
    config: <TData = Config>({ client, options }: FuzioNativePredictionConfigQuery<TData>) => UseQueryOptions<Config, Error, TData>;
    status: <TData_1 = StatusResponse>({ client, options }: FuzioNativePredictionStatusQuery<TData_1>) => UseQueryOptions<StatusResponse, Error, TData_1>;
    myCurrentPosition: <TData_2 = MyCurrentPositionResponse>({ client, args, options }: FuzioNativePredictionMyCurrentPositionQuery<TData_2>) => UseQueryOptions<MyCurrentPositionResponse, Error, TData_2>;
    finishedRound: <TData_3 = FinishedRound>({ client, args, options }: FuzioNativePredictionFinishedRoundQuery<TData_3>) => UseQueryOptions<FinishedRound, Error, TData_3>;
    myGameList: <TData_4 = MyGameResponse>({ client, args, options }: FuzioNativePredictionMyGameListQuery<TData_4>) => UseQueryOptions<MyGameResponse, Error, TData_4>;
    myPendingReward: <TData_5 = PendingRewardResponse>({ client, args, options }: FuzioNativePredictionMyPendingRewardQuery<TData_5>) => UseQueryOptions<PendingRewardResponse, Error, TData_5>;
    myPendingRewardRounds: <TData_6 = PendingRewardRoundsResponse>({ client, args, options }: FuzioNativePredictionMyPendingRewardRoundsQuery<TData_6>) => UseQueryOptions<PendingRewardRoundsResponse, Error, TData_6>;
    getUsersPerRound: <TData_7 = RoundUsersResponse>({ client, args, options }: FuzioNativePredictionGetUsersPerRoundQuery<TData_7>) => UseQueryOptions<RoundUsersResponse, Error, TData_7>;
    myPendingRewardRound: <TData_8 = PendingRewardResponse>({ client, args, options }: FuzioNativePredictionMyPendingRewardRoundQuery<TData_8>) => UseQueryOptions<PendingRewardResponse, Error, TData_8>;
    getClaimInfoPerRound: <TData_9 = ClaimInfoResponse>({ client, args, options }: FuzioNativePredictionGetClaimInfoPerRoundQuery<TData_9>) => UseQueryOptions<ClaimInfoResponse, Error, TData_9>;
    getClaimInfoByUser: <TData_10 = ClaimInfoResponse>({ client, args, options }: FuzioNativePredictionGetClaimInfoByUserQuery<TData_10>) => UseQueryOptions<ClaimInfoResponse, Error, TData_10>;
    totalSpent: <TData_11 = TotalSpentResponse>({ client, args, options }: FuzioNativePredictionTotalSpentQuery<TData_11>) => UseQueryOptions<TotalSpentResponse, Error, TData_11>;
    getAdmins: <TData_12 = AdminsResponse>({ client, options }: FuzioNativePredictionGetAdminsQuery<TData_12>) => UseQueryOptions<AdminsResponse, Error, TData_12>;
};
export interface FuzioNativePredictionReactQuery<TResponse, TData = TResponse> {
    client: FuzioNativePredictionQueryClient;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface FuzioNativePredictionGetAdminsQuery<TData> extends FuzioNativePredictionReactQuery<AdminsResponse, TData> {
}
export declare function useFuzioNativePredictionGetAdminsQuery<TData = AdminsResponse>({ client, options }: FuzioNativePredictionGetAdminsQuery<TData>): any;
export interface FuzioNativePredictionTotalSpentQuery<TData> extends FuzioNativePredictionReactQuery<TotalSpentResponse, TData> {
    args: {
        player: Addr;
    };
}
export declare function useFuzioNativePredictionTotalSpentQuery<TData = TotalSpentResponse>({ client, args, options }: FuzioNativePredictionTotalSpentQuery<TData>): any;
export interface FuzioNativePredictionGetClaimInfoByUserQuery<TData> extends FuzioNativePredictionReactQuery<ClaimInfoResponse, TData> {
    args: {
        limit?: number;
        player: Addr;
        startAfter?: Uint128;
    };
}
export declare function useFuzioNativePredictionGetClaimInfoByUserQuery<TData = ClaimInfoResponse>({ client, args, options }: FuzioNativePredictionGetClaimInfoByUserQuery<TData>): any;
export interface FuzioNativePredictionGetClaimInfoPerRoundQuery<TData> extends FuzioNativePredictionReactQuery<ClaimInfoResponse, TData> {
    args: {
        limit?: number;
        roundId: Uint128;
        startAfter?: Addr;
    };
}
export declare function useFuzioNativePredictionGetClaimInfoPerRoundQuery<TData = ClaimInfoResponse>({ client, args, options }: FuzioNativePredictionGetClaimInfoPerRoundQuery<TData>): any;
export interface FuzioNativePredictionMyPendingRewardRoundQuery<TData> extends FuzioNativePredictionReactQuery<PendingRewardResponse, TData> {
    args: {
        player: Addr;
        roundId: Uint128;
    };
}
export declare function useFuzioNativePredictionMyPendingRewardRoundQuery<TData = PendingRewardResponse>({ client, args, options }: FuzioNativePredictionMyPendingRewardRoundQuery<TData>): any;
export interface FuzioNativePredictionGetUsersPerRoundQuery<TData> extends FuzioNativePredictionReactQuery<RoundUsersResponse, TData> {
    args: {
        limit?: number;
        roundId: Uint128;
        startAfter?: Addr;
    };
}
export declare function useFuzioNativePredictionGetUsersPerRoundQuery<TData = RoundUsersResponse>({ client, args, options }: FuzioNativePredictionGetUsersPerRoundQuery<TData>): any;
export interface FuzioNativePredictionMyPendingRewardRoundsQuery<TData> extends FuzioNativePredictionReactQuery<PendingRewardRoundsResponse, TData> {
    args: {
        player: Addr;
    };
}
export declare function useFuzioNativePredictionMyPendingRewardRoundsQuery<TData = PendingRewardRoundsResponse>({ client, args, options }: FuzioNativePredictionMyPendingRewardRoundsQuery<TData>): any;
export interface FuzioNativePredictionMyPendingRewardQuery<TData> extends FuzioNativePredictionReactQuery<PendingRewardResponse, TData> {
    args: {
        player: Addr;
    };
}
export declare function useFuzioNativePredictionMyPendingRewardQuery<TData = PendingRewardResponse>({ client, args, options }: FuzioNativePredictionMyPendingRewardQuery<TData>): any;
export interface FuzioNativePredictionMyGameListQuery<TData> extends FuzioNativePredictionReactQuery<MyGameResponse, TData> {
    args: {
        limit?: number;
        player: Addr;
        startAfter?: Uint128;
    };
}
export declare function useFuzioNativePredictionMyGameListQuery<TData = MyGameResponse>({ client, args, options }: FuzioNativePredictionMyGameListQuery<TData>): any;
export interface FuzioNativePredictionFinishedRoundQuery<TData> extends FuzioNativePredictionReactQuery<FinishedRound, TData> {
    args: {
        roundId: Uint128;
    };
}
export declare function useFuzioNativePredictionFinishedRoundQuery<TData = FinishedRound>({ client, args, options }: FuzioNativePredictionFinishedRoundQuery<TData>): any;
export interface FuzioNativePredictionMyCurrentPositionQuery<TData> extends FuzioNativePredictionReactQuery<MyCurrentPositionResponse, TData> {
    args: {
        address: string;
    };
}
export declare function useFuzioNativePredictionMyCurrentPositionQuery<TData = MyCurrentPositionResponse>({ client, args, options }: FuzioNativePredictionMyCurrentPositionQuery<TData>): any;
export interface FuzioNativePredictionStatusQuery<TData> extends FuzioNativePredictionReactQuery<StatusResponse, TData> {
}
export declare function useFuzioNativePredictionStatusQuery<TData = StatusResponse>({ client, options }: FuzioNativePredictionStatusQuery<TData>): any;
export interface FuzioNativePredictionConfigQuery<TData> extends FuzioNativePredictionReactQuery<Config, TData> {
}
export declare function useFuzioNativePredictionConfigQuery<TData = Config>({ client, options }: FuzioNativePredictionConfigQuery<TData>): any;
export interface FuzioNativePredictionModifyDevWalletMutation {
    client: FuzioNativePredictionClient;
    msg: {
        newDevWallets: WalletInfo[];
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useFuzioNativePredictionModifyDevWalletMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioNativePredictionModifyDevWalletMutation>, "mutationFn">): any;
export interface FuzioNativePredictionRemoveAdminMutation {
    client: FuzioNativePredictionClient;
    msg: {
        oldAdmin: Addr;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useFuzioNativePredictionRemoveAdminMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioNativePredictionRemoveAdminMutation>, "mutationFn">): any;
export interface FuzioNativePredictionAddAdminMutation {
    client: FuzioNativePredictionClient;
    msg: {
        newAdmin: Addr;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useFuzioNativePredictionAddAdminMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioNativePredictionAddAdminMutation>, "mutationFn">): any;
export interface FuzioNativePredictionResumeMutation {
    client: FuzioNativePredictionClient;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useFuzioNativePredictionResumeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioNativePredictionResumeMutation>, "mutationFn">): any;
export interface FuzioNativePredictionHaltMutation {
    client: FuzioNativePredictionClient;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useFuzioNativePredictionHaltMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioNativePredictionHaltMutation>, "mutationFn">): any;
export interface FuzioNativePredictionCollectionWinningRoundMutation {
    client: FuzioNativePredictionClient;
    msg: {
        roundId: Uint128;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useFuzioNativePredictionCollectionWinningRoundMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioNativePredictionCollectionWinningRoundMutation>, "mutationFn">): any;
export interface FuzioNativePredictionCollectWinningsMutation {
    client: FuzioNativePredictionClient;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useFuzioNativePredictionCollectWinningsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioNativePredictionCollectWinningsMutation>, "mutationFn">): any;
export interface FuzioNativePredictionCloseRoundMutation {
    client: FuzioNativePredictionClient;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useFuzioNativePredictionCloseRoundMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioNativePredictionCloseRoundMutation>, "mutationFn">): any;
export interface FuzioNativePredictionBetBearMutation {
    client: FuzioNativePredictionClient;
    msg: {
        amount: Uint128;
        roundId: Uint128;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useFuzioNativePredictionBetBearMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioNativePredictionBetBearMutation>, "mutationFn">): any;
export interface FuzioNativePredictionBetBullMutation {
    client: FuzioNativePredictionClient;
    msg: {
        amount: Uint128;
        roundId: Uint128;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useFuzioNativePredictionBetBullMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioNativePredictionBetBullMutation>, "mutationFn">): any;
export interface FuzioNativePredictionUpdateConfigMutation {
    client: FuzioNativePredictionClient;
    msg: {
        config: Config;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useFuzioNativePredictionUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioNativePredictionUpdateConfigMutation>, "mutationFn">): any;
