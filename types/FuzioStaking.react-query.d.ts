/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { UseQueryOptions, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Uint128, Denom, Schedule, Binary, StakersListResponse, ConfigResponse, StakerInfoResponse, StateResponse, UnbondingInfoResponse } from "./FuzioStaking.types";
import { FuzioStakingQueryClient, FuzioStakingClient } from "./FuzioStaking.client";
export declare const fuzioStakingQueryKeys: {
    contract: readonly [{
        readonly contract: "fuzioStaking";
    }];
    address: (contractAddress: string) => readonly [{
        readonly address: string;
        readonly contract: "fuzioStaking";
    }];
    config: (contractAddress: string, args?: Record<string, unknown>) => readonly [{
        readonly method: "config";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string;
        readonly contract: "fuzioStaking";
    }];
    state: (contractAddress: string, args?: Record<string, unknown>) => readonly [{
        readonly method: "state";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string;
        readonly contract: "fuzioStaking";
    }];
    stakerInfo: (contractAddress: string, args?: Record<string, unknown>) => readonly [{
        readonly method: "staker_info";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string;
        readonly contract: "fuzioStaking";
    }];
    allStakers: (contractAddress: string, args?: Record<string, unknown>) => readonly [{
        readonly method: "all_stakers";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string;
        readonly contract: "fuzioStaking";
    }];
    unbondingInfo: (contractAddress: string, args?: Record<string, unknown>) => readonly [{
        readonly method: "unbonding_info";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string;
        readonly contract: "fuzioStaking";
    }];
};
export declare const fuzioStakingQueries: {
    config: <TData = ConfigResponse>({ client, options }: FuzioStakingConfigQuery<TData>) => UseQueryOptions<ConfigResponse, Error, TData>;
    state: <TData_1 = StateResponse>({ client, args, options }: FuzioStakingStateQuery<TData_1>) => UseQueryOptions<StateResponse, Error, TData_1>;
    stakerInfo: <TData_2 = StakerInfoResponse>({ client, args, options }: FuzioStakingStakerInfoQuery<TData_2>) => UseQueryOptions<StakerInfoResponse, Error, TData_2>;
    allStakers: <TData_3 = StakersListResponse>({ client, args, options }: FuzioStakingAllStakersQuery<TData_3>) => UseQueryOptions<StakersListResponse, Error, TData_3>;
    unbondingInfo: <TData_4 = UnbondingInfoResponse>({ client, args, options }: FuzioStakingUnbondingInfoQuery<TData_4>) => UseQueryOptions<UnbondingInfoResponse, Error, TData_4>;
};
export interface FuzioStakingReactQuery<TResponse, TData = TResponse> {
    client: FuzioStakingQueryClient;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface FuzioStakingUnbondingInfoQuery<TData> extends FuzioStakingReactQuery<UnbondingInfoResponse, TData> {
    args: {
        limit?: number;
        staker: string;
        startAfter?: number;
    };
}
export declare function useFuzioStakingUnbondingInfoQuery<TData = UnbondingInfoResponse>({ client, args, options }: FuzioStakingUnbondingInfoQuery<TData>): any;
export interface FuzioStakingAllStakersQuery<TData> extends FuzioStakingReactQuery<StakersListResponse, TData> {
    args: {
        limit?: number;
        startAfter?: string;
    };
}
export declare function useFuzioStakingAllStakersQuery<TData = StakersListResponse>({ client, args, options }: FuzioStakingAllStakersQuery<TData>): any;
export interface FuzioStakingStakerInfoQuery<TData> extends FuzioStakingReactQuery<StakerInfoResponse, TData> {
    args: {
        staker: string;
    };
}
export declare function useFuzioStakingStakerInfoQuery<TData = StakerInfoResponse>({ client, args, options }: FuzioStakingStakerInfoQuery<TData>): any;
export interface FuzioStakingStateQuery<TData> extends FuzioStakingReactQuery<StateResponse, TData> {
    args: {
        blockTime?: number;
    };
}
export declare function useFuzioStakingStateQuery<TData = StateResponse>({ client, args, options }: FuzioStakingStateQuery<TData>): any;
export interface FuzioStakingConfigQuery<TData> extends FuzioStakingReactQuery<ConfigResponse, TData> {
}
export declare function useFuzioStakingConfigQuery<TData = ConfigResponse>({ client, options }: FuzioStakingConfigQuery<TData>): any;
export interface FuzioStakingUpdateLockDurationMutation {
    client: FuzioStakingClient;
    msg: {
        lockDuration: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useFuzioStakingUpdateLockDurationMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioStakingUpdateLockDurationMutation>, "mutationFn">): any;
export interface FuzioStakingUpdateTokensAndDistributionMutation {
    client: FuzioStakingClient;
    msg: {
        distributionSchedule: Schedule[];
        lpTokenContract: string;
        rewardToken: Denom[];
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useFuzioStakingUpdateTokensAndDistributionMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioStakingUpdateTokensAndDistributionMutation>, "mutationFn">): any;
export interface FuzioStakingUpdateTokenContractMutation {
    client: FuzioStakingClient;
    msg: {
        lpTokenContract: string;
        rewardToken: Denom[];
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useFuzioStakingUpdateTokenContractMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioStakingUpdateTokenContractMutation>, "mutationFn">): any;
export interface FuzioStakingUpdateConfigMutation {
    client: FuzioStakingClient;
    msg: {
        distributionSchedule: Schedule[];
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useFuzioStakingUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioStakingUpdateConfigMutation>, "mutationFn">): any;
export interface FuzioStakingUpdateAdminMutation {
    client: FuzioStakingClient;
    msg: {
        admin: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useFuzioStakingUpdateAdminMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioStakingUpdateAdminMutation>, "mutationFn">): any;
export interface FuzioStakingRedeemMutation {
    client: FuzioStakingClient;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useFuzioStakingRedeemMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioStakingRedeemMutation>, "mutationFn">): any;
export interface FuzioStakingWithdrawMutation {
    client: FuzioStakingClient;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useFuzioStakingWithdrawMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioStakingWithdrawMutation>, "mutationFn">): any;
export interface FuzioStakingUnbondMutation {
    client: FuzioStakingClient;
    msg: {
        amount: Uint128;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useFuzioStakingUnbondMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioStakingUnbondMutation>, "mutationFn">): any;
export interface FuzioStakingReceiveMutation {
    client: FuzioStakingClient;
    msg: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useFuzioStakingReceiveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioStakingReceiveMutation>, "mutationFn">): any;
