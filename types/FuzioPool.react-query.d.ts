/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { UseQueryOptions, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Uint128, WalletInfo, Expiration, TokenSelect, FeeResponse, InfoResponse, Token1ForToken2PriceResponse, Token2ForToken1PriceResponse } from "./FuzioPool.types";
import { FuzioPoolQueryClient, FuzioPoolClient } from "./FuzioPool.client";
export declare const fuzioPoolQueryKeys: {
    contract: readonly [{
        readonly contract: "fuzioPool";
    }];
    address: (contractAddress: string) => readonly [{
        readonly address: string;
        readonly contract: "fuzioPool";
    }];
    info: (contractAddress: string, args?: Record<string, unknown>) => readonly [{
        readonly method: "info";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string;
        readonly contract: "fuzioPool";
    }];
    token1ForToken2Price: (contractAddress: string, args?: Record<string, unknown>) => readonly [{
        readonly method: "token1_for_token2_price";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string;
        readonly contract: "fuzioPool";
    }];
    token2ForToken1Price: (contractAddress: string, args?: Record<string, unknown>) => readonly [{
        readonly method: "token2_for_token1_price";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string;
        readonly contract: "fuzioPool";
    }];
    fee: (contractAddress: string, args?: Record<string, unknown>) => readonly [{
        readonly method: "fee";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string;
        readonly contract: "fuzioPool";
    }];
};
export declare const fuzioPoolQueries: {
    info: <TData = InfoResponse>({ client, options }: FuzioPoolInfoQuery<TData>) => UseQueryOptions<InfoResponse, Error, TData>;
    token1ForToken2Price: <TData_1 = Token1ForToken2PriceResponse>({ client, args, options }: FuzioPoolToken1ForToken2PriceQuery<TData_1>) => UseQueryOptions<Token1ForToken2PriceResponse, Error, TData_1>;
    token2ForToken1Price: <TData_2 = Token2ForToken1PriceResponse>({ client, args, options }: FuzioPoolToken2ForToken1PriceQuery<TData_2>) => UseQueryOptions<Token2ForToken1PriceResponse, Error, TData_2>;
    fee: <TData_3 = FeeResponse>({ client, options }: FuzioPoolFeeQuery<TData_3>) => UseQueryOptions<FeeResponse, Error, TData_3>;
};
export interface FuzioPoolReactQuery<TResponse, TData = TResponse> {
    client: FuzioPoolQueryClient;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface FuzioPoolFeeQuery<TData> extends FuzioPoolReactQuery<FeeResponse, TData> {
}
export declare function useFuzioPoolFeeQuery<TData = FeeResponse>({ client, options }: FuzioPoolFeeQuery<TData>): any;
export interface FuzioPoolToken2ForToken1PriceQuery<TData> extends FuzioPoolReactQuery<Token2ForToken1PriceResponse, TData> {
    args: {
        token2Amount: Uint128;
    };
}
export declare function useFuzioPoolToken2ForToken1PriceQuery<TData = Token2ForToken1PriceResponse>({ client, args, options }: FuzioPoolToken2ForToken1PriceQuery<TData>): any;
export interface FuzioPoolToken1ForToken2PriceQuery<TData> extends FuzioPoolReactQuery<Token1ForToken2PriceResponse, TData> {
    args: {
        token1Amount: Uint128;
    };
}
export declare function useFuzioPoolToken1ForToken2PriceQuery<TData = Token1ForToken2PriceResponse>({ client, args, options }: FuzioPoolToken1ForToken2PriceQuery<TData>): any;
export interface FuzioPoolInfoQuery<TData> extends FuzioPoolReactQuery<InfoResponse, TData> {
}
export declare function useFuzioPoolInfoQuery<TData = InfoResponse>({ client, options }: FuzioPoolInfoQuery<TData>): any;
export interface FuzioPoolUpdateConfigMutation {
    client: FuzioPoolClient;
    msg: {
        devWalletLists: WalletInfo[];
        feePercentDenominator: Uint128;
        feePercentNumerator: Uint128;
        owner?: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useFuzioPoolUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioPoolUpdateConfigMutation>, "mutationFn">): any;
export interface FuzioPoolSwapAndSendToMutation {
    client: FuzioPoolClient;
    msg: {
        expiration?: Expiration;
        inputAmount: Uint128;
        inputToken: TokenSelect;
        minToken: Uint128;
        recipient: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useFuzioPoolSwapAndSendToMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioPoolSwapAndSendToMutation>, "mutationFn">): any;
export interface FuzioPoolPassThroughSwapMutation {
    client: FuzioPoolClient;
    msg: {
        expiration?: Expiration;
        inputToken: TokenSelect;
        inputTokenAmount: Uint128;
        outputAmmAddress: string;
        outputMinToken: Uint128;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useFuzioPoolPassThroughSwapMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioPoolPassThroughSwapMutation>, "mutationFn">): any;
export interface FuzioPoolSwapMutation {
    client: FuzioPoolClient;
    msg: {
        expiration?: Expiration;
        inputAmount: Uint128;
        inputToken: TokenSelect;
        minOutput: Uint128;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useFuzioPoolSwapMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioPoolSwapMutation>, "mutationFn">): any;
export interface FuzioPoolRemoveLiquidityMutation {
    client: FuzioPoolClient;
    msg: {
        amount: Uint128;
        expiration?: Expiration;
        minToken1: Uint128;
        minToken2: Uint128;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useFuzioPoolRemoveLiquidityMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioPoolRemoveLiquidityMutation>, "mutationFn">): any;
export interface FuzioPoolAddLiquidityMutation {
    client: FuzioPoolClient;
    msg: {
        expiration?: Expiration;
        maxToken2: Uint128;
        minLiquidity: Uint128;
        token1Amount: Uint128;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useFuzioPoolAddLiquidityMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FuzioPoolAddLiquidityMutation>, "mutationFn">): any;
