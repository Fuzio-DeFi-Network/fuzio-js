/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.28.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Addr, Uint128, Config, WalletInfo, FinishedRound, AdminsResponse, ClaimInfoResponse, RoundUsersResponse, MyCurrentPositionResponse, MyGameResponse, PendingRewardResponse, StatusResponse } from "./FuzioNativePrediction.types";
export interface FuzioNativePredictionReadOnlyInterface {
    contractAddress: string;
    config: () => Promise<Config>;
    status: () => Promise<StatusResponse>;
    myCurrentPosition: ({ address }: {
        address: string;
    }) => Promise<MyCurrentPositionResponse>;
    finishedRound: ({ roundId }: {
        roundId: Uint128;
    }) => Promise<FinishedRound>;
    myGameList: ({ limit, player, startAfter }: {
        limit?: number;
        player: Addr;
        startAfter?: Uint128;
    }) => Promise<MyGameResponse>;
    myPendingReward: ({ player }: {
        player: Addr;
    }) => Promise<PendingRewardResponse>;
    getUsersPerRound: ({ limit, roundId, startAfter }: {
        limit?: number;
        roundId: Uint128;
        startAfter?: Addr;
    }) => Promise<RoundUsersResponse>;
    myPendingRewardRound: ({ player, roundId }: {
        player: Addr;
        roundId: Uint128;
    }) => Promise<PendingRewardResponse>;
    getClaimInfoPerRound: ({ limit, roundId, startAfter }: {
        limit?: number;
        roundId: Uint128;
        startAfter?: Addr;
    }) => Promise<ClaimInfoResponse>;
    getClaimInfoByUser: ({ limit, player, startAfter }: {
        limit?: number;
        player: Addr;
        startAfter?: Uint128;
    }) => Promise<ClaimInfoResponse>;
    getAdmins: () => Promise<AdminsResponse>;
}
export declare class FuzioNativePredictionQueryClient implements FuzioNativePredictionReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    config: () => Promise<Config>;
    status: () => Promise<StatusResponse>;
    myCurrentPosition: ({ address }: {
        address: string;
    }) => Promise<MyCurrentPositionResponse>;
    finishedRound: ({ roundId }: {
        roundId: Uint128;
    }) => Promise<FinishedRound>;
    myGameList: ({ limit, player, startAfter }: {
        limit?: number;
        player: Addr;
        startAfter?: Uint128;
    }) => Promise<MyGameResponse>;
    myPendingReward: ({ player }: {
        player: Addr;
    }) => Promise<PendingRewardResponse>;
    getUsersPerRound: ({ limit, roundId, startAfter }: {
        limit?: number;
        roundId: Uint128;
        startAfter?: Addr;
    }) => Promise<RoundUsersResponse>;
    myPendingRewardRound: ({ player, roundId }: {
        player: Addr;
        roundId: Uint128;
    }) => Promise<PendingRewardResponse>;
    getClaimInfoPerRound: ({ limit, roundId, startAfter }: {
        limit?: number;
        roundId: Uint128;
        startAfter?: Addr;
    }) => Promise<ClaimInfoResponse>;
    getClaimInfoByUser: ({ limit, player, startAfter }: {
        limit?: number;
        player: Addr;
        startAfter?: Uint128;
    }) => Promise<ClaimInfoResponse>;
    getAdmins: () => Promise<AdminsResponse>;
}
export interface FuzioNativePredictionInterface extends FuzioNativePredictionReadOnlyInterface {
    contractAddress: string;
    sender: string;
    updateConfig: ({ config }: {
        config: Config;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    betBull: ({ amount, roundId }: {
        amount: Uint128;
        roundId: Uint128;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    betBear: ({ amount, roundId }: {
        amount: Uint128;
        roundId: Uint128;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    closeRound: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    collectWinnings: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    collectionWinningRound: ({ roundId }: {
        roundId: Uint128;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    halt: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    resume: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    addAdmin: ({ newAdmin }: {
        newAdmin: Addr;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    removeAdmin: ({ oldAdmin }: {
        oldAdmin: Addr;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    modifyDevWallet: ({ newDevWallets }: {
        newDevWallets: WalletInfo[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class FuzioNativePredictionClient extends FuzioNativePredictionQueryClient implements FuzioNativePredictionInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    updateConfig: ({ config }: {
        config: Config;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    betBull: ({ amount, roundId }: {
        amount: Uint128;
        roundId: Uint128;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    betBear: ({ amount, roundId }: {
        amount: Uint128;
        roundId: Uint128;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    closeRound: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    collectWinnings: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    collectionWinningRound: ({ roundId }: {
        roundId: Uint128;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    halt: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    resume: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    addAdmin: ({ newAdmin }: {
        newAdmin: Addr;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    removeAdmin: ({ oldAdmin }: {
        oldAdmin: Addr;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    modifyDevWallet: ({ newDevWallets }: {
        newDevWallets: WalletInfo[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
